#!/usr/bin/env node

var SLICE_SYMBOL = '-'
var argv = process.argv.slice(1)
var options = [
        {},
        {
            key: 'port',
            alias: 'p',
            default: 8888
        },
        {
            key: 'open',
            alias: 'o',
            default: false
        }
    ]

if (argv.length > 1) {
    argv = argv.reduce(function(p, c, i, a) {
        p = typeof p === 'string' ? {} : p

        if (c.indexOf(SLICE_SYMBOL) > -1) {
            c = c.replace(SLICE_SYMBOL, '')
            c = c.replace(SLICE_SYMBOL, '')
            p[c] = undefined
        }

        if (p.hasOwnProperty(c) && 
            a[++i] && 
            a[i].indexOf(SLICE_SYMBOL) === -1) {
                p[c] = a[i]
        }

        return p
    })
}

options = options.reduce(function(p, c, i, a) {
    if (typeof c.default === 'boolean') {
        c.value = (argv.hasOwnProperty(c.key) || argv.hasOwnProperty(c.alias)) ? !c.default : c.default
    }
    else {
        c.value = argv[c.key] || argv[c.alias] || c.default
    }

    p[c.key] = c
    return p
})

if (Number.isNaN(parseInt(options.port.value, 10))) {
    console.log('port invalid')
    process.exit(0)
}

var fs       = require('fs')
var http     = require('http')
var connect  = require('connect')
var terminal = require('term.js')
var static   = require('serve-static')
var io       = require('socket.io')
var pty      = require('pty.js')
var exec     = require('child_process').exec
var spawn    = require('child_process').spawn


var app, io, term,
    buff = []

// create http server
app = connect()
app.use(terminal.middleware())
app.use(static(__dirname + '/../'))
app = http.createServer(app).listen(options.port.value, function() {
    var url = 'http://localhost:' + options.port.value
    console.log('Running at ' + url)
    options.open.value && openURL(url)
})


// create socket server
io(app).on('connection', function(socket) {
    var handshakeData = socket.handshake.query

    // configure terminal
    term = pty.spawn(process.env.SHELL || '/bin/bash', [], {
        name: fs.existsSync('/usr/share/terminfo/x/xterm-256color') ? 'xterm-256color' : 'xterm',
        cols: parseInt(handshakeData.cols, 10) || 80,
        rows: parseInt(handshakeData.rows, 10) || 24,
        cwd: process.env.HOME
    })

    term.on('data', function(data) {
        return !socket
            ? buff.push(data)
            : socket.emit('data', data)
    })

    term.on('close', function() {
        socket && socket.disconnect()
    })

    socket.on('data', function(data) {
        term.write(data)
    })

    socket.on('disconnect', function() {
        socket = null
        term.end()
    })

    socket.on('resize', function(data) {
        term.resize(data[0], data[1])
    })

    while(buff.length) {
        socket.emit('data', buff.shift())
    }
})


/**
 * https://github.com/JacksonTian/anywhere/blob/master/bin/anywhere
 */
function openURL(url) {
    switch (process.platform) {
        case "darwin":
            exec('open ' + url);
            break;
        case "win32":
            exec('start ' + url);
            break;
        default:
            spawn('xdg-open', [url]);
            // I use `spawn` since `exec` fails on my machine (Linux i386).
            // I heard that `exec` has memory limitation of buffer size of 512k.
            // http://stackoverflow.com/a/16099450/222893
            // But I am not sure if this memory limit causes the failure of `exec`.
            // `xdg-open` is specified in freedesktop standard, so it should work on
            // Linux, *BSD, solaris, etc.
    }
}
